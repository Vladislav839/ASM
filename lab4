#include <iostream>

void NormolizeMatrix(int** arr, int n, int m)
{
	int min;

	int default_min = *(*arr);

	__asm
	{
		mov ecx, m;
		xor esi, esi;
		mov edx, arr;
	begin:
		xor eax, eax;
		sub esi, n;
		cmp esi, 0;
		je end_;
		add esi, n;
		mov ebx, [edx][esi * 4];
	inner_begin:
		mov edi, [ebx][eax * 4];
		sub edi, default_min;
		cmp edi, 0;
		jnl m_notMin;
		add edi, default_min;
		mov min, edi;
	m_notMin:
		inc eax;
		add edi, default_min;
		loop inner_begin;
		inc esi;
		mov ecx, m;
		jmp begin;
	end_:
		xor esi, esi;
	begin2:
		xor eax, eax;
		sub esi, n;
		cmp esi, 0;
		je end_2;
		add esi, n;
		mov ebx, [edx][esi * 4];
	inner_begin2:
		mov edi, [ebx][eax * 4];
		sub edi, min;
		mov[ebx][eax * 4], edi;
		inc eax;
		loop inner_begin2;
		inc esi;
		mov ecx, m;
		jmp begin2;
	end_2:

	}
}


int main() 
{
	int n, m;

	std::cout << "input n and m\n";

	std::cin >> n >> m;

	int** matrix = new int* [n];

	for (int i = 0; i < n; i++)
	{
		matrix[i] = new int[m];
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			matrix[i][j] = rand() % 10 + 1;
		}
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			std::cout << matrix[i][j] << "\t";
		}
		std::cout << "\n";
	}

	NormolizeMatrix(matrix, n, m);

	std::cout << "Normolized matrix" << std::endl;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			std::cout << matrix[i][j] << "\t";
		}
		std::cout << "\n";
	}
	system("pause");
	return 0;
}
